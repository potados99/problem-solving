#!/bin/zsh

# 새 백준 문제 풀이 파이썬 파일을 만들어주는 스크립트.
#
# 문제 번호를 제공하면,
# - 해당 문제의 이름과 링크를 주석으로 포함하고
# - 문제 번호를 이름으로 가지는
# 파이썬 파일을 생성함.
#
# 사용법: ./new-boj [문제 번호 또는 문제 링크]

# 현재 스크립트의 절대 경로를 구해 내야 합니다.
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
solution_dir="$DIR/boj"

# 인자가 주어졌으면 인자로부터, 아니면 입력을 받아서 문제 정보를 가져옵니다.
if [ "$#" -eq 0 ]; then
  # 인자가 없으면 실행 중에 입력받습니다.
  echo -n "백준 문제 번호 또는 링크: "
  read -r problem_info
else
  # 인자가 있었으면 가져와 씁니다.
  problem_info="$1"
fi

# problem_info는 링크일 수도 문제 번호일 수도 있습니다.
# 그래서 문제 번호를 추출해 내야 합니다.
if [[ $problem_info =~ ^[0-9]+$ ]]; then
  # 모두 숫자이면 그대로 사용합니다.
  problem_number=$problem_info
elif [[ $problem_info =~ ^https://www.acmicpc.net/problem/[0-9]+$ ]]; then
  # 링크 형식이면 맨 끝에만 떼어내 씁니다.
  problem_number=$(echo "$problem_info" | sed -n "s/^.*https:\/\/www\.acmicpc\.net\/problem\/\([0-9]*\).*$/\1/p")
else
  # 아니면(비어있거나 숫자 아니거나 링크도 아닐 때) 뻗습니다.
  echo "문제 번호 또는 링크가 필요합니다!"
  exit 1
fi

# 새 파일 이름이 확정되었습니다.
solution_file="$solution_dir/$problem_number.py"

# 그런데 해당 문제가 이미 푼 문제일 수도 있습니다!
if [ -f "$solution_file" ]; then
  echo "$problem_number번 문제의 솔루션이 이미 존재합니다!"
  exit 1
fi

# 이제 필요한 정보는 모두 구했습니다.
# 할 일 합니다.
problem_link="https://www.acmicpc.net/problem/$problem_number"
problem_page=$(curl -s -N "$problem_link")
problem_name=$(echo "$problem_page" | sed -n "s/^.*<title>\(.*\)<\/title>.*$/\1/p")
input_redeclaration="import sys; input = sys.stdin.readline"

{
  echo "# $problem_name"
  echo "# $problem_link"
  printf "\n%s\n" "$input_redeclaration"
} >> "$solution_file"

echo "$problem_name"
echo "$solution_file"
